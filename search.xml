<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo部署时出现&#39;spawn failed&#39;错误</title>
      <link href="/2023/03/09/deployment-problem/"/>
      <url>/2023/03/09/deployment-problem/</url>
      
        <content type="html"><![CDATA[<br><p>之前部署blog的时候，出现了这样的错误：</p><p><img src="https://i.imgur.com/JWjKCgP.png" alt="error"></p><p>在网上搜了一些解决方案，第一次的时候用的是下面的方法 👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 进入blog的根目录</span><br><span class="line">cd /d/user/blog/</span><br><span class="line"></span><br><span class="line">## 删除git的部署文件夹</span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"></span><br><span class="line">## 然后执行以下命令</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>完成了之后成功部署了。</p><p>当时我并不知道core.autocrlf是干嘛的，只是搜出来很多人都在说这个方法我就照做了。后来我去搜了一下core.autoarlf到底是什么，网上的解答说这个主要是解决换行符的问题。具体的可以看一下这个帖子：<a href="https://stackoverflow.com/questions/3206843/how-line-ending-conversions-work-with-git-core-autocrlf-between-different-operat">How line ending conversions work with git core.autocrlf between different operating systems</a>或者git的<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace">官方文档</a>。简单来说如果是做跨平台项目时可能会需要把这个设置为true，不过如果是单平台的话设置成false就可以了。（不过我没太搞懂设置这个跟解决spawn failed有什么关系？）</p><p>然而上面的方法好像不能一劳永逸，后来我还是遇到了同样的错误。这一次我尝试了第二种方法，把_config.yml文件里的repo修改成ssh格式 👉<code>git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</code><br>比如我的就修改成<code>@github.com:June-ss/june-ss.github.io.git</code>，and it worked:)<br>可能因为我之前设置了ssh key吧😀（这样每一次push的时候都可以不用密码）<br>PS 关于ssh协议，可以参考一下这篇文章：<a href="https://www.ssh.com/academy/ssh/protocol">What is the SSH Protocol</a>，关于SSH和HTTPS的对比，可以参考一下这个帖子：<a href="https://www.quora.com/What-is-the-difference-between-SSH-and-HTTPS">What is the difference between SSH and HTTPS?</a></p><p>以及，我还看到有人说，出现spawn failed也可能是网络问题，总之万事不决先重启一下试试（虽然我重启了之后并没有什么用。。。）</p><br><center>-</center><br>]]></content>
      
      
      
        <tags>
            
            <tag> blog搭建日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celebrate Women&#39;s Day</title>
      <link href="/2023/03/08/women-day/"/>
      <url>/2023/03/08/women-day/</url>
      
        <content type="html"><![CDATA[<br><p>Today is the International Women’s Day, and I built a tribute page to commemorate Ada Lovelace, the first computer programmer, a brilliant woman (actually it is modified on the basis of my previous project on freeCodeCamp🤣 I just added some simple fuctions using javascript I learned recently and optimised the layout).</p><p>Here is the link👉 <a href="https://ada-lovelace-tribute-page.netlify.app/">https://ada-lovelace-tribute-page.netlify.app/</a></p><p>You can also see the preview here. 👇</p><p><img src="https://i.imgur.com/xjmJXQv.png" alt="page-1"></p><p><img src="https://i.imgur.com/zfC4CGo.png" alt="page-2"></p><p><img src="https://i.imgur.com/S4uaEJE.png" alt="page-3"></p><p><img src="https://i.imgur.com/KYTIGXU.png" alt="page-4"></p><p><img src="https://i.imgur.com/jGGk6y2.png" alt="page-5"></p><p>As you can see, there is a menu button and a scroll-to-top button. 👇<br><img src="https://i.imgur.com/gbpkF7Y.gif" alt="Imgur"></p><p>Hope you enjoy it.😉</p><p>p.s. I think it is better to open this page on pc. I open the page on my phone and my pad, some fonts are not compatible and the layout somewhere looks kind of weird anyway…😢</p><br><center>-</center><br>]]></content>
      
      
      
        <tags>
            
            <tag> web dev note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法-1</title>
      <link href="/2023/03/05/markdown-syntax-1/"/>
      <url>/2023/03/05/markdown-syntax-1/</url>
      
        <content type="html"><![CDATA[<br/><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h3><p>写blog文章的时候，使用到的语言是Markdown。它的语法很简单，常用的标记也就那几个，掌握起来很容易。</p><p>p.s. 我已经习惯在notion上写日记，而notion可以导出md格式的文件，所以我现在是先在notion上编辑好，再复制粘贴到blog post的文件中，通过vs code预览来调整格式。另外，Markdown也支持HTML标签的使用，一些Markdown语法无法实现的样式，我会用HTML标签来实现。</p><hr><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a><strong>标题语法</strong></h3><p>如果要创建标题，可以在文本前加上<code>#</code>（井号）。<code>#</code>的个数代表了标题的级别，与HTML中的<code>&lt;h&gt;</code>标签对应。</p><center><img src="https://i.imgur.com/iQQ69Me.png" alt="markdown-heading-syntax-1" width="80%"></center><p>当然，也可以在文本下方加上任意数量的<code>==</code>来识别一级标题，用任意数量的<code>--</code>来识别二级标题。</p><center><img src="https://i.imgur.com/8jiUuKr.png" alt="markdown-heading-syntax-2" width="80%"></center><p>注意：使用<code>#</code>标记的话，记得在<code>#</code>标记和文本之间添加一个空格，以及在标题文本的前后都各空一行。</p><center><img src="https://i.imgur.com/XUmSA4I.png" alt="heading-best-practices" width="80%"></center><br/><h3 id="段落和换行语法"><a href="#段落和换行语法" class="headerlink" title="段落和换行语法"></a><strong>段落和换行语法</strong></h3><p>如果要创建段落，可以在两行文本之间加上空白行。</p><center><img src="https://i.imgur.com/cYhvltI.png" alt="paragraphs" width="80%"></center><p>注意不要用空格（space）和制表符（tab）来缩进段落。如果想要缩进段落，可以在段首使用空格符号：<code>&amp;nbsp;</code>（半角空格）或<code>&amp;emsp;</code>（全角空格）。</p><p>如果要换行，在行尾添加两个（或以上）空格，再回车。</p><center><img src="https://i.imgur.com/wA8jLPa.png" alt="line-breaks" width="80%"></center><p>另外，如果想要创建空白行，可以使用HTML里的<code>&lt;br&gt;</code>标签，或者在新的一行中使用上面提到的空格符号（<code>&amp;nbsp;</code>或<code>&amp;emsp;</code>）。使用空格符号时，记得带上分号，并且要在空行使用（如果在行内使用的话就是单纯地添加空格）。</p><br/><h3 id="文本样式语法"><a href="#文本样式语法" class="headerlink" title="文本样式语法"></a><strong>文本样式语法</strong></h3><ul><li><p><em>斜体</em>：在想要斜体强调的文本前后使用一个<code>*</code>（星号）或<code>_</code>（下划线）。<br>注意，如果想要斜体强调一个单词或短语（中间没有空格）中的某一部分时，为了兼容性考虑，使用<code>*</code>而不是<code>_</code>。</p>  <center><img src="https://i.imgur.com/RgVYJ71.png" alt="italic" width="90%"></center>  </li><li><p><strong>加粗</strong>：在想要加粗的文本前后使用两个<code>*</code>或<code>_</code>。<br>同样的，如果想要加粗一个单词中的某一部分时，不要用下划线<code>_</code>。</p>  <center><img src="https://i.imgur.com/gFtWEWx.png" alt="bold" width="90%"></center></li><li><p><em><strong>同时加粗和斜体</strong></em>：在想要强调的文本前后使用三个<code>*</code>或<code>_</code>。注意在单词内不要使用下划线<code>_</code>。</p>  <center><img src="https://i.imgur.com/SdWo81Q.png" alt="bold-and-italic" width="90%"></center></li><li><p><u>下划线</u>：Markdown本身没有实现文本下划线的语法，可以使用HTML的<code>&lt;u&gt;</code>标签来实现。比如：<code>&lt;u&gt;text with underline&lt;/u&gt;</code>，呈现出来的效果为<u>text with underline</u>。</p></li><li><p><del>删除线</del>：在文本前后添加两个<code>~</code>（波浪线）符号。比如：<code>~~strikethrough the text~~</code>，呈现出来的效果为<del>strikethrough the text</del>。</p></li><li><p><mark>高亮</mark>：在文本前后添加两个<code>=</code>，比如：<code>==highlight==</code>，但有些Markdown编辑器可能不兼容（我在vs code上试了一下好像就是不行的）。也可以使用HTML的<code>&lt;mark&gt;</code>标签来实现。</p></li><li><p><font color="#a67f78">字体颜色</font>：使用HTML里的<code>&lt;font&gt;</code>标签的<code>color</code>属性，比如：<code>&lt;font color=&quot;red&quot;&gt;red text&lt;/font&gt;</code>，呈现出来的效果就是 <font color="red">red text</font>。</p></li><li><p><font face="楷体">更改字体</font>：使用<code>&lt;font&gt;</code>标签的<code>face</code>属性，比如：<code>&lt;font face=&quot;cursive&quot;&gt;Cursive&lt;/font&gt;</code>，呈现出来的效果就是 <font face="cursive">Cursive</font>。</p></li><li><p><font size=5>字体大小</font>：使用<code>&lt;font&gt;</code>标签的<code>size</code>属性，比如：<code>&lt;font size=2&gt;font size 2&lt;/font&gt;</code>，呈现出来的效果就是 <font size=2>font size 2</font>（一般默认为3，数值范围为1~7）。</p></li></ul><br/><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a><strong>引用语法</strong></h3><p>要创建块引用，在段落前加<code>&gt;</code>就可以了。</p><p>记得在文本和<code>&gt;</code>之间加一个空格。</p><p>多个段落的块引用，在段落之间的空白行加上一个<code>&gt;</code>符号。</p><p>嵌套块引用，在次级段落前多加一个<code>&gt;</code>符号。</p><p>🌰 举个例子：</p><pre><code>&gt; This is a blockquote.&gt;&gt; This is a different paragraph.&gt;&gt;&gt; This is a nested blockquote.</code></pre><p>渲染出来的效果是：</p><blockquote><p>This is a blockquote.<br>This is a different paragraph.</p><blockquote><p>This is a nested blockquote.</p></blockquote></blockquote><p>块引用中也可以给文本添加其它的样式，例如标题、加粗、斜体、列表等，但不是所有的样式都能添加。</p><p>注意：记得在块引用的前后加上空白行。</p><center><img src="https://i.imgur.com/Tp6hE09.png" alt="blockquote" width="80%"></center><br/><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a><strong>列表语法</strong></h3><p>Markdown可以创建有序列表和无序列表。</p><ul><li><p>有序列表：在每一个列表项前加上数字和点，并且在序号和文本之间添加一个空格。列表项的序号要从1开始。比如：</p>  <center><img src="https://i.imgur.com/99VNV02.png" alt="ordered-list"></center></li><li><p>无序列表：在每一个列表项前添加一个<code>-</code>或<code>*</code>或<code>+</code>。记得加空格。比如：</p>  <center><img src="https://i.imgur.com/FIoOzWz.png" alt="unordered-list"></center></li></ul><p>注意：如果你使用了<code>-</code>来标记一个无序列表的列表项，同一列表中的其它列表项也要用同一符号（也就是<code>-</code>）来标记。</p><br/><h3 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a><strong>代码语法</strong></h3><p>如果要将单词或短语表示为代码，可以在代码文本的前后加上一个<code>`</code>（反引号）。比如：</p><center><img src="https://i.imgur.com/OGDTRZN.png" alt="code" width="80%"></center><p>如果想要在代码中包含一个或多个反引号，可以将代码包裹在双反引号<code>``</code>中。比如：</p><center><img src="https://i.imgur.com/JB0zCQI.png" alt="escaping-backticks" width="80%"></center><p>如果要创建代码块，将代码块的每一行缩进至少四个空格或一个制表符。比如：</p><pre><code>    &lt;html&gt;        &lt;head&gt;        &lt;/head&gt;    &lt;/html&gt;</code></pre><p>渲染出来的效果就是：</p><pre><code>&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;&lt;html&gt;</code></pre><br/><h3 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a><strong>分隔线语法</strong></h3><p>创建分隔线，可以在单独的空行中添加三个（或以上）<code>***</code>或<code>---</code>或<code>___</code>。</p><p>注意：记得在分隔线的前后加上空白行。</p><center><img src="https://i.imgur.com/yoZMXzO.png" alt="horizontal-rule" width="80%"></center><br/><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a><strong>链接语法</strong></h3><ul><li><p>链接的文本放在中括号里，链接地址放在后面的圆括号里，title（也就是当鼠标指针停在链接上时出现的文字）放在链接地址后面，用空格隔开。</p><p>  🌰 举个例子：</p><pre><code>  Here is my [blog page](https://june-ss.github.io/ &quot;Flo&#39;s blog&quot;).</code></pre><p>  渲染出来的效果就是：Here is my <a href="https://june-ss.github.io/" title="Flo&#39;s blog">blog page</a>.</p></li><li><p>URL地址和email地址可以放在尖括号里，比如：<br><code>&lt;https://june-ss.github.io/&gt;</code>渲染出来的效果为 <a href="https://june-ss.github.io/">https://june-ss.github.io/</a><br><code>&lt;fake@example.com&gt;</code>渲染出来的效果为 <a href="mailto:&#x66;&#97;&#x6b;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x66;&#97;&#x6b;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></p></li><li><p>如果想要强调链接（加粗或斜体），可以在链接语法前后加上相应的标记，比如：<br/><code>This is a **[link](https://june-ss.github.io/)**.</code>渲染出来的效果为 Here is my <strong><a href="https://june-ss.github.io/">blog page</a></strong>.<br/><code>This is a *[link](https://june-ss.github.io/)*.</code>渲染出来的效果为 Here is my <em><a href="https://june-ss.github.io/">blog page</a></em>.</p></li><li><p>如果要将链接表示为代码，则是给链接文本加上反引号，比如：<br/><code>Here is my <a href="https://june-ss.github.io/"><code>blog page</code></a>.</code> 渲染出来的效果为 Here is my <a href="https://june-ss.github.io/"><code>blog page</code></a>.</p></li></ul><p>注意：为了更好地兼容，尽量使用<code>%20</code>来代替链接中的空格。</p><center><img src="https://i.imgur.com/2FIRDL2.png" alt="link" width="80%"></center><br/><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a><strong>图片语法</strong></h3><p>Markdown的图片语法为：<br/><code>![a photo of sea](https://imgur.com/aeyg65Y &quot;sea&quot;)</code><br/>渲染出来的效果为：<img src="https://i.imgur.com/aeyg65Y.jpg" alt="a photo of sea" title="sea"></p><p>如果要为图片添加链接，则将图片放在方括号里，后面加上圆括号中的链接地址，比如：<br/><code>[![sunset in Ediburgh](https://imgur.com/94hgQ6k)](https://june-ss.github.io/)</code><br/>渲染出来的效果为：<a href="https://june-ss.github.io/"><img src="https://i.imgur.com/94hgQ6k.jpg" alt="sunset in Ediburgh"></a></p><p>但Markdown不支持对图片进行大小的调整，如果想要调整图片大小，可以使用HTML的<code>&lt;img&gt;</code>标签添加图片并进行调整。</p><br/><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a><strong>转义字符</strong></h3><p>Markdown使用反斜杠<code>\</code>来对字符进行转义。</p><p>比如你想在文本中显示一个星号，但星号在Markdown中用于创建一个无序列表项，如果只输入<code>*</code>，是无法显示出星号的，那么此时用<code>\</code>来对符号进行转义（也就是<code>\*</code>），就可以显示出星号了。比如：<br/><code>\* Without the backslash, this would be a bullet in an unordered list.</code><br/>显示出来的就是：<br/>* Without the backslash, this would be a bullet in an unordered list.<br/></p><p>下面的字符都可以用<code>\</code>来进行转义：</p><center><img src="https://i.imgur.com/mQAl5a6.png" alt="escaping-characters" width="80%"></center><br/><h3 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a><strong>内嵌HTML标签</strong></h3><p>在支持HTML标签的Markdown应用中，可以使用HTML标签，而不用Markdown的语法格式，有时候会更方便。</p><p>使用HTML中的区块元素（比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>）时，要在其前后加上空白行，与其它内容分隔开。而且这些元素的开始与结尾标签不可以缩进。</p><p>另外，在HTML的块级标签内不能使用Markdown语法（会失效）。</p><hr><br/><p>Ref: <a href="https://www.markdownguide.org/">https://www.markdownguide.org/</a></p><p>以及，图片语法部分中用来举例的那两张照片是我自己拍的🥺</p><br/><center>-</center><br/>]]></content>
      
      
      
        <tags>
            
            <tag> blog搭建日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建Blog</title>
      <link href="/2023/03/04/build-a-blog/"/>
      <url>/2023/03/04/build-a-blog/</url>
      
        <content type="html"><![CDATA[<br /><p><strong>受豆瓣wit小组<a href="https://douban.com/group/topic/267508386/" target="_blank">一个帖子</a>的启发，我决定搭建一个个人blog，记录我的转码过程。第一篇文章就简单记录一下利用hexo和github搭建个人blog的过程。</strong></p><br /><hr><h3 id="首先是开始建站"><a href="#首先是开始建站" class="headerlink" title="首先是开始建站"></a><strong>首先是开始建站</strong></h3><ul><li><p>你的电脑上需要安装git和nodejs，去官网选择适合自己的版本下载安装即可。</p></li><li><p>然后，你需要在GitHub上创建个人仓库。点击GitHub右上角，New repository创建新仓库，仓库名为：<strong>username.github.io</strong>。比如我的用户名为June-ss，那我创建的新仓库名就是<strong>june-ss.github.io</strong>。</p>  <center><img src="https://i.imgur.com/MW039aq.png" alt="create a new repository" width="60%"></center></li><li><p>在自己常用的（或者准备存放blog文件的）文件夹里右键打开git，输入<code>npm install -g hexo-cli</code>安装hexo。</p>  <center><img src="https://i.imgur.com/vLDWfoN.png" alt="git install hexo" width="80%"></center></li><li><p>安装完成后，输入<code>hexo init &lt;foldername&gt;</code>初始化你的blog，此时你的文件夹里会出现一个叫<foldername>的文件夹，这也就是你的blog文件夹。然后转到新建出来的这个文件夹，右键打开git（或者用<code>cd /path</code>命令）。</p></li><li><p>依次输入<code>hexo g</code>、<code>hexo s</code>，然后在浏览器输入<strong>localhost:4000</strong>来对blog进行本地预览。一开始大概是这样的 👇🏼</p>  <center><img src="https://i.imgur.com/MN5Hgug.png" alt="default page" width="90%"></center>  </li><li><p>插入几条hexo的常见命令：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]            #初始化博客</span><br><span class="line">$ hexo new &lt;title&gt;              #新建一篇文章，new可以简写成n</span><br><span class="line">$ hexo generate                 #生成静态文件，generate可以简写成g</span><br><span class="line">$ hexo server                   #启动服务器预览，server可以简写成s，默认的访问网址为http://localhost:4000/</span><br><span class="line">$ hexo deploy                   #部署网站，deploy可以简写成d</span><br><span class="line">$ hexo clean                    #清除缓存，clean可以简写成cl</span><br></pre></td></tr></table></figure></li><li><p>本地预览没问题后，就可以发布网站了。打开blog文件夹里的站点配置文件（我用的是vs code）。</p>  <center><img src="https://i.imgur.com/DjtNq6g.png" alt="open the config file" width="70%"></center>  <p>  拉到最后，进行以下的修改，并ctrl+s保存。</p>  <img src="https://i.imgur.com/Eme8zBg.png" alt="change the deploy">  </li><li><p>回到git命令窗口，依次输入<code>hexo cl</code>、<code>hexo g</code>、<code>hexo d</code>，然后打开浏览器，输入你的blog地址（比如我的是<a href="https://june-ss/github.io/" target="_blank">https://june-ss/github.io/</a>），就能看到你的blog网站上线了。</p></li></ul><hr><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a><strong><strong><strong><strong><strong><strong><strong>更换主题</strong></strong></strong></strong></strong></strong></strong></h3><p>你可以在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>选择你喜欢的主题进行更换。举个例子，如果你想使用<a href="https://github.com/Dreyer/hexo-theme-artemis">artemis</a>这款主题（如图）：</p><center><img src="https://i.imgur.com/RWu9hOE.png" alt="artemis theme" width="80%"></center><p>点击蓝色标题，按照作者在README.md中所写的那样安装并配置就可以了。在这里，先在git里依次输入以下指令，代表将artemis主题下载到blog目录的themes主题下的artemis文件夹中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-pug hexo-generator-feed hexo-generator-sitemap</span><br><span class="line">git clone https://github.com/Dreyer/hexo-theme-artemis.git themes/artemis</span><br></pre></td></tr></table></figure><p>然后打开blog文件夹的站点配置文件（**_config.yml**），将themes改成artemis。</p><center><img src="https://i.imgur.com/He5GQXF.png" alt="change your theme" width="80%"></center><p>你也可以根据自己的喜好修改你的主题配置。</p><p>配置好了之后，再次输入<code>hexo g</code>、<code>hexo d</code>部署网站（如果网页有问题的话可以输入<code>hexo cl</code>清除缓存，然后再试试）。</p><hr><h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a><strong><strong><strong><strong><strong><strong>个性化设置</strong></strong></strong></strong></strong></strong></h3><p>你也可以根据个人喜好和需要添加不同的插件。在<a href="https://hexo.io/plugins/" target="_blank">这个网页</a>你可以看到所有hexo支持的插件，每一个插件的github页面都有安装和使用的相关说明。</p><p>还有一些基本的设置，比如站点配置文件（**_config.yml**）里，你可以修改你的网站信息：</p><center><img src="https://i.imgur.com/x2lvi47.png" alt="change your config" width="60%"></center><p><code>title</code>和<code>subtitle</code>就是网站的标题和副标题；</p><p><code>description</code>和<code>keywords</code>分别是网站的描述和关键词，主要用于SEO；</p><p><code>author</code>是你自己的名字，主要用于显示文章的作者；</p><p><code>language</code>是网站使用的语言，如果要使用简中的话（取决于你要使用的主题），一般会设置为zh-CN；</p><p><code>timezone</code>是网站的时区，如果不设置的话默认为你电脑的时区。</p><p>更多关于配置的信息可以参考<a href=”[https://hexo.io/docs/configuration.html](https://hexo.io/docs/configuration.html)” target="_blank">官方docs</a>。</p><hr><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a><strong><strong><strong><strong><strong><strong>发布文章</strong></strong></strong></strong></strong></strong></h3><p>在命令行中输入<code>hexo n &lt;titlename&gt;</code>创建一篇新文章。</p><p>输入这条命令之后，在<span style="font-weight: bold">\source_posts</span>文件夹中就可以看到名为<span style="font-weight: bold">&lt;title&gt;.md</span>的文件。用markdown编辑器打开（我用的是vs code，可以一边输入一边在右边预览文章效果，很方便进行修改调整），然后编辑markdown文件就可以了。</p><p>举个例子：</p><center><img src="https://i.imgur.com/Q1uBXwA.png" alt="create a new post" width="80%"></center><p>编辑完成后，可以通过命令<code>hexo s --debug</code>在<strong>localhost:4000</strong>预览文章效果。确认没问题后，输入<code>hexo g</code>、<code>hexo d</code>生成、部署网页。</p><hr><h3 id="我遇到过的问题"><a href="#我遇到过的问题" class="headerlink" title="我遇到过的问题"></a><strong><strong><strong><strong><strong><strong><strong><strong><strong>我遇到过的问题</strong></strong></strong></strong></strong></strong></strong></strong></strong></h3><p>在进行本地预览的时候，我访问localhost:4000一直都显示无法连接：</p><center><img src="https://i.imgur.com/mgYaFf1.png" alt="cannot connect" width="90%"></center><p>我google了半天，尝试了各种方法，包括换端口、去控制面板设置网络连接等等都没有成功。最后，重启了一下电脑，我又成功连接上了🤣</p><p>总之，万事不决，重启电脑😼</p><p>还是说一下google到的两种解决办法。</p><ul><li><p>换端口</p><p>  在git命令窗口输入<code>hexo server -p 5000</code>（这个5000也可以换成别的，比如4001之类的），然后在浏览器输入更换后的地址，比如<strong>localhost:5000</strong>。</p></li><li><p>设置网络连接</p><p>  打开控制面板，点开程序和功能的【启用或关闭windows功能】。</p>  <center><img src="https://i.imgur.com/bXCUgsN.png" alt="control panel" width="80%"></center>  <p>  然后把Internet Information Services里的FTP服务器勾上。</p>  <center><img src="https://i.imgur.com/RoOKRve.png" alt="set FTP" width="80%"></center></li></ul><hr><br/><center style="font-weight: bold">以上，一个简单的个人blog网站就做好了🥳</center><br /><center>-</center><br />]]></content>
      
      
      
        <tags>
            
            <tag> blog搭建日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
